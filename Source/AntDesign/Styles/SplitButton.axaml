<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="using:AntDesign.Helpers"
                    xmlns:assists="using:AntDesign.Assists" 
                    xmlns:extensions="using:AntDesign.Extensions" 
                    x:CompileBindings="True">

	<Design.PreviewWith>
		<Border Padding="60">
			<StackPanel Spacing="20">
				<SplitButton Content="SplitButton">
					<SplitButton.Flyout>
						<Flyout>Hello</Flyout>
					</SplitButton.Flyout>
				</SplitButton>
				<SplitButton CornerRadius="16" Content="Rounded">
					<SplitButton.Flyout>
						<Flyout>Hello</Flyout>
					</SplitButton.Flyout>
				</SplitButton>
				<SplitButton IsEnabled="False">Disabled</SplitButton>
				<ToggleSplitButton Content="ToggleSplitButton">
					<ToggleSplitButton.Flyout>
						<Flyout>Hello</Flyout>
					</ToggleSplitButton.Flyout>
				</ToggleSplitButton>
				<ToggleSplitButton Content="Checked" IsChecked="True">
					<ToggleSplitButton.Flyout>
						<Flyout>Hello</Flyout>
					</ToggleSplitButton.Flyout>
				</ToggleSplitButton>
				<ToggleSplitButton Content="Checked Disabled" IsChecked="True" IsEnabled="False"/>
			</StackPanel>
		</Border>
	</Design.PreviewWith>


	<ControlTheme x:Key="AntDesignSplitButtonButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		
		<Style Selector="^[Tag=flyout-open] /template/ ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundPressed}" />
			<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPressed}" />
			<Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
		</Style>

		<Style Selector="^[Tag=checked]">
			<Style Selector="^ /template/ ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundChecked}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
				<Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
			</Style>

			<Style Selector="^:pointerover /template/ ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundCheckedPointerOver}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPointerOver}" />
				<Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPointerOver}" />
			</Style>

			<Style Selector="^:pressed /template/ ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
				<Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
			</Style>

			<Style Selector="^:disabled /template/ ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundCheckedDisabled}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedDisabled}" />
				<Setter Property="TextElement.Foreground" Value="{DynamicResource SplitButtonForegroundCheckedDisabled}" />
			</Style>
		</Style>

		<Style Selector="^[Tag=checked-flyout-open] /template/ ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
			<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
			<Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
		</Style>
	</ControlTheme>


	<Template x:Key="SplitButtonPlugContent">
		<PathIcon Height="12" Width="12"
				  Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z" />
	</Template>

	<ControlTheme x:Key="{x:Type SplitButton}" TargetType="SplitButton">
		<Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
		<Setter Property="MinHeight" Value="35" />
		<Setter Property="Background" Value="{DynamicResource SplitButtonBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource SplitButtonForeground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrush}" />
		<Setter Property="assists:SplitButtonAssists.PlugContent" Value="{StaticResource SplitButtonPlugContent}"/>
		<Setter Property="assists:SplitButtonAssists.Spacing" Value="0"/>
 		<Setter Property="BorderThickness" Value="{DynamicResource OverlayBorderThickness}" />
		<Setter Property="CornerRadius" Value="{DynamicResource OverlayCornerRadius}" />
		<Setter Property="Padding" Value="{DynamicResource OverlayPadding}" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
		<Setter Property="ClipToBounds" Value="False" />
		<Setter Property="Focusable" Value="True" />
		<Setter Property="Template">
			<ControlTemplate>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>

					<Button x:Name="PART_PrimaryButton"
							Grid.Column="0"
							MinWidth="60" 
							FontSize="{TemplateBinding FontSize}"
							FontFamily="{TemplateBinding FontFamily}"
							FontWeight="{TemplateBinding FontWeight}"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Command="{TemplateBinding Command}"
							CommandParameter="{TemplateBinding CommandParameter}"
							Background="{TemplateBinding Background}"
							Foreground="{TemplateBinding Foreground}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}"
							Padding="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							extensions:Classes.left="True"
							KeyboardNavigation.IsTabStop="False" />

					<Border Grid.Column="1" Width="{TemplateBinding assists:SplitButtonAssists.Spacing}"/>
					
					<Button x:Name="PART_SecondaryButton"
							Grid.Column="2"
							MinWidth="30" 
							Content="{TemplateBinding assists:SplitButtonAssists.PlugContent}"
							Background="{TemplateBinding Background}"
							Foreground="{TemplateBinding Foreground}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="Center"
							VerticalContentAlignment="Center"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Focusable="False"
							extensions:Classes.right="True"
							KeyboardNavigation.IsTabStop="False">
					
					</Button>
				</Grid>
			</ControlTemplate>
		</Setter>

		<Style Selector="^:flyout-open /template/ Button">
			<Setter Property="Tag" Value="flyout-open" />
		</Style>

		<Style Selector="^:checked /template/ Button">
			<Setter Property="Tag" Value="checked" />
		</Style>

		<Style Selector="^:checked:flyout-open /template/ Button">
			<Setter Property="Tag" Value="checked-flyout-open" />
		</Style>
	</ControlTheme>

	<ControlTheme x:Key="PrimarySplitButton" TargetType="SplitButton" BasedOn="{StaticResource {x:Type SplitButton}}">
		<Setter Property="Background" Value="{DynamicResource SplitButtonPrimaryBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource SplitButtonPrimaryForeground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonPrimaryBorderBrush}" />
		<Setter Property="assists:SplitButtonAssists.Spacing" Value="1"/>
		<Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
		
	</ControlTheme>

</ResourceDictionary>
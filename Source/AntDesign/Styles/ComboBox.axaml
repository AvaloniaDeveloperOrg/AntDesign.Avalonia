<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=netstandard"
					xmlns:helpers="using:AntDesign.Helpers"
                    xmlns:ripple="using:AntDesign.Controls.Ripple"
                    xmlns:assists="using:AntDesign.Assists"
					x:CompileBindings="True">
	<Design.PreviewWith>
		<Border Padding="20">
			<StackPanel Spacing="10">
				<ComboBox PlaceholderText="Select an item">
					<ComboBoxItem>Item 1</ComboBoxItem>
					<ComboBoxItem>Item 2</ComboBoxItem>
				</ComboBox>
				<ComboBox IsEnabled="False"
						  Width="200"
						  SelectedIndex="1"
						  HorizontalContentAlignment="Center">
					<ComboBoxItem>Item 1</ComboBoxItem>
					<ComboBoxItem>Item 2</ComboBoxItem>
				</ComboBox>
				<ComboBox PlaceholderText="Error">
					<DataValidationErrors.Error>
						<sys:Exception>
							<x:Arguments>
								<x:String>Error</x:String>
							</x:Arguments>
						</sys:Exception>
					</DataValidationErrors.Error>
				</ComboBox>
			</StackPanel>
		</Border>
	</Design.PreviewWith>

	<Template x:Key="DropDownGlyphStyle">
		<PathIcon UseLayoutRounding="False"
				  IsHitTestVisible="False"
				  Margin="5,0,5,0"
				  Height="{DynamicResource DropDownGlyphIconHeight}"
				  Width="{DynamicResource DropDownGlyphIconWidth}"
				  Opacity="{DynamicResource InnerIconOpacity}"
				  Foreground="{DynamicResource ComboBoxDropDownGlyphForeground}"
				  Data="{DynamicResource ComboBoxButtonIcon}"
				  HorizontalAlignment="Center"
				  VerticalAlignment="Center" />
	</Template>

	<ControlTheme x:Key="{x:Type ComboBox}" TargetType="ComboBox">
		<Setter Property="FontSize" Value="{DynamicResource FontSize}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Background" Value="{DynamicResource ComboBoxBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource ComboBoxForeground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}" />
		<Setter Property="assists:ComboBoxAssists.PointerOverBackground" Value="{DynamicResource ComboBoxPointerOverBackground}" />
		<Setter Property="assists:ComboBoxAssists.PointerOverForeground" Value="{DynamicResource ComboBoxPointerOverForeground}" />
		<Setter Property="assists:ComboBoxAssists.PointerOverBorderBrush" Value="{DynamicResource ComboBoxPointerOverBorderBrush}" />
		<Setter Property="assists:ComboBoxAssists.PressedBackground" Value="{DynamicResource ComboBoxPressedBackground}" />
		<Setter Property="assists:ComboBoxAssists.PressedForeground" Value="{DynamicResource ComboBoxPressedForeground}" />
		<Setter Property="assists:ComboBoxAssists.PressedBorderBrush" Value="{DynamicResource ComboBoxPressedBorderBrush}" />
		<Setter Property="assists:ComboBoxAssists.IsRipple"  Value="False"/>
		<Setter Property="assists:ComboBoxAssists.RippleColor"  Value="{DynamicResource RippleColor}"/>
		<Setter Property="assists:ComboBoxAssists.RippleColorAlpha"  Value="{DynamicResource RippleOpacity}"/>
		<Setter Property="assists:ComboBoxAssists.PopupBackground" Value="{DynamicResource ComboBoxPopupBackground}"/>
		<Setter Property="assists:ComboBoxAssists.PopupBorderBrush" Value="{DynamicResource ComboBoxPopupBorderBrush}"/>
		<Setter Property="assists:ComboBoxAssists.PopupBorderThickness" Value="{DynamicResource PopupBorderThickness}"/>
		<Setter Property="assists:ComboBoxAssists.PopupCornerRadius" Value="{DynamicResource OverlayCornerRadius}"/>
		<Setter Property="assists:ComboBoxAssists.PopupMargin" Value="{DynamicResource OverlayMargin}"/>
		<Setter Property="assists:ComboBoxAssists.InnerRightContent" Value="{StaticResource DropDownGlyphStyle}"/>
		<Setter Property="MaxDropDownHeight" Value="{DynamicResource ComboBoxMaxDropDownHeight}" />
		<Setter Property="PlaceholderForeground" Value="{DynamicResource ComboBoxPlaceHolderForeground}" />
		<Setter Property="BorderThickness" Value="{DynamicResource OverlayBorderThickness}" />
		<Setter Property="CornerRadius" Value="{DynamicResource OverlayCornerRadius}" />
		<Setter Property="Padding" Value="{DynamicResource Padding}" />
		<Setter Property="Margin" Value="{DynamicResource Margin}" />
		<Setter Property="ClipToBounds" Value="False" />
		<Setter Property="MinWidth" Value="{DynamicResource TextBoxMinWidth}" />
		<Setter Property="MinHeight" Value="{DynamicResource TextBoxMinHeight}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="FocusAdorner" Value="{x:Null}" />
		<Setter Property="Template">
			<ControlTemplate TargetType="ComboBox">
				<DataValidationErrors x:Name="PART_ErrorContainer"
									  Margin="{TemplateBinding Margin}">
					<ripple:RippleEffectx x:Name="{x:Static helpers:PARTNameHelper.PART_LayoutRoot}"  
										  IsRipple="{TemplateBinding assists:ComboBoxAssists.IsRipple}"
										  RippleColor="{TemplateBinding assists:ComboBoxAssists.RippleColor}"
										  RippleColorAlpha="{TemplateBinding assists:ComboBoxAssists.RippleColorAlpha}"
										  CornerRadius="{TemplateBinding CornerRadius}"
										  MinWidth="{TemplateBinding MinWidth}"
										  MinHeight="{TemplateBinding MinHeight}">

						<Border x:Name="{x:Static helpers:PARTNameHelper.PART_BorderElement}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="{TemplateBinding CornerRadius}"
								Padding="{TemplateBinding Padding}" >
							<Grid ColumnDefinitions="*,Auto">
								<TextBlock x:Name="PlaceholderTextBlock"
										   Grid.Column="0"
										   Text="{TemplateBinding PlaceholderText}"
										   Opacity="{DynamicResource InnerPlaceholderOpacity}"
										   Foreground="{DynamicResource ComboBoxPlaceholderTextForeground}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										   IsVisible="{TemplateBinding SelectionBoxItem, Converter={x:Static ObjectConverters.IsNull}}" />
								<ContentPresenter x:Name="{x:Static helpers:PARTNameHelper.PART_ContentPresenter}"
												  Grid.Column="0"
												  BorderThickness =" 0"
												  CornerRadius="{TemplateBinding CornerRadius}"
												  Content="{TemplateBinding SelectionBoxItem}"
												  ContentTemplate="{TemplateBinding ItemTemplate}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />

								<ContentPresenter Grid.Column="1"
												  Content="{TemplateBinding assists:ComboBoxAssists.InnerRightContent}"/>

								<Popup x:Name="{x:Static helpers:PARTNameHelper.PART_Popup}"
									   WindowManagerAddShadowHint="False"
									   IsOpen="{TemplateBinding IsDropDownOpen, Mode=TwoWay}"
									   MaxHeight="{TemplateBinding MaxDropDownHeight}"
									   PlacementTarget="{TemplateBinding}"
									   IsLightDismissEnabled="True"
									   InheritsTransform="True">

									<Popup.MinWidth>
										<MultiBinding Converter="{StaticResource PopupSizeConverter}">
											<TemplateBinding Property="Bounds"/>
											<TemplateBinding Property="(assists:ComboBoxAssists.PopupMargin)"/>
										</MultiBinding>
									</Popup.MinWidth>

									<Border x:Name="PopupBorder"
											Padding="{DynamicResource PopupPadding}"
											Margin="{TemplateBinding assists:ComboBoxAssists.PopupMargin}"
											Background="{TemplateBinding assists:ComboBoxAssists.PopupBackground}"
											BorderBrush="{TemplateBinding assists:ComboBoxAssists.PopupBorderBrush}"
											BorderThickness="{TemplateBinding assists:ComboBoxAssists.PopupBorderThickness}"
											CornerRadius="{TemplateBinding assists:ComboBoxAssists.PopupCornerRadius}"
											ClipToBounds="False"
											BoxShadow="{DynamicResource ComboBoxShadow}">
										<ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
													  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
											<ItemsPresenter Name="{x:Static helpers:PARTNameHelper.PART_ItemsPresenter}"
															ItemsPanel="{TemplateBinding ItemsPanel}" />
										</ScrollViewer>
									</Border>
								</Popup>
							</Grid>
						</Border>

					</ripple:RippleEffectx>
				</DataValidationErrors>
			</ControlTemplate>
		</Setter>

		<!--  PointerOver State  -->
		<Style Selector="^:pointerover">
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{TemplateBinding assists:ComboBoxAssists.PointerOverBackground}" />
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:ComboBoxAssists.PointerOverBorderBrush}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{TemplateBinding assists:ComboBoxAssists.PointerOverForeground}" />
			</Style>
		</Style>

		<!--  Pressed State  -->
		<Style Selector="^:pressed">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="IsRipple" Value="True" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{TemplateBinding assists:ComboBoxAssists.PressedBackground}" />
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:ComboBoxAssists.PressedBorderBrush}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{TemplateBinding assists:ComboBoxAssists.PressedForeground}" />
			</Style>
		</Style>

		<!-- Error State -->
		<Style Selector="^:error">
			<Setter Property="assists:ComboBoxAssists.PointerOverBorderBrush" Value="{DynamicResource ErrorBorderBrush}" />
			<Setter Property="assists:ComboBoxAssists.PressedBorderBrush" Value="{DynamicResource ErrorBorderBrush}" />
			<Setter Property="assists:ComboBoxAssists.RippleColor"  Value="{DynamicResource ErrorColor}"/>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="BorderBrush" Value="{DynamicResource ErrorBackground}" />
			</Style>
		</Style>

		<!--  Focus Pressed State  -->
		<Style Selector="^:focused:pressed">
			<Setter Property="Opacity" Value="0.8"/>
		</Style>

		<!--  Focused State  -->
		<Style Selector="^:focus-visible">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="IsRipple" Value="True" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{TemplateBinding assists:ComboBoxAssists.PressedBackground}" />
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:ComboBoxAssists.PressedBorderBrush}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{TemplateBinding assists:ComboBoxAssists.PressedForeground}" />
				<Setter Property="Opacity" Value="{DynamicResource InnerElementOpacity} " />
			</Style>
		</Style>

		<!--  Focused - Within State  -->
		<Style Selector="^:focus-within">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="IsRipple" Value="True" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{TemplateBinding assists:ComboBoxAssists.PressedBackground}" />
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:ComboBoxAssists.PressedBorderBrush}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{TemplateBinding assists:ComboBoxAssists.PressedForeground}" />
				<Setter Property="Opacity" Value="{DynamicResource InnerElementOpacity} " />
			</Style>
		</Style>
 
		<Style Selector="^:dropdownopen:not(:focused)">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="IsRipple" Value="True" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{TemplateBinding assists:ComboBoxAssists.PressedBackground}" />
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:ComboBoxAssists.PressedBorderBrush}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{TemplateBinding assists:ComboBoxAssists.PressedForeground}" />
				<Setter Property="Opacity" Value="{DynamicResource InnerElementOpacity} " />
			</Style>
		</Style>

		<!--  Disabled State  -->
		<Style Selector="^:disabled">
			<Setter Property="Opacity" Value="0.7"/>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="Background" Value="{DynamicResource DisableBackground}" />
			</Style>
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Foreground" Value="{DynamicResource DisableForeground}" />
			</Style>
		</Style>

		<Style Selector="^.left">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource LeftCornerRadiusFilterConverter}}" />
			</Style>
		</Style>

		<Style Selector="^.center">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="CornerRadius" Value="0" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="CornerRadius" Value="0" />
				<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness, Converter={StaticResource NoLeftBorderThickness}}" />
			</Style>

			<Style Selector="^:pointerover">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
			<Style Selector="^:focus">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>

			<Style Selector="^:focus-within">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
			
			<Style Selector="^:dropdownopen:not(:focused)">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
		</Style>

		<Style Selector="^.right">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_LayoutRoot">
				<Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
			</Style>
			<Style Selector="^ /template/ Border#PART_BorderElement">
				<Setter Property="CornerRadius" Value="{TemplateBinding CornerRadius, Converter={StaticResource RightCornerRadiusFilterConverter}}" />
				<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness, Converter={StaticResource NoLeftBorderThickness}}" />
			</Style>

			<Style Selector="^:pointerover">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
			<Style Selector="^:focus">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>

			<Style Selector="^:focus-within">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
			
			<Style Selector="^:dropdownopen:not(:focused)">
				<Style Selector="^ /template/ DataValidationErrors#PART_ErrorContainer">
					<Setter Property="Margin" Value="{TemplateBinding BorderThickness, Converter={StaticResource OnlyLeftReverseMargin}}"/>
				</Style>
				<Style Selector="^ /template/ Border#PART_BorderElement">
					<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}" />
				</Style>
			</Style>
			
		</Style>

	</ControlTheme>

</ResourceDictionary>

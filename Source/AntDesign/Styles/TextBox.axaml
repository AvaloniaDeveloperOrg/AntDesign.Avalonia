<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:helpers="using:AntDesign.Helpers"
					xmlns:ripple="using:AntDesign.Controls.Ripple"
					xmlns:assists="using:AntDesign.Assists"
                    x:CompileBindings="True">
	
	<Design.PreviewWith>
		<Border Padding="20">
			<StackPanel Spacing="20">
				<TextBox>Left</TextBox>
				<TextBox TextAlignment="Center">Center</TextBox>
				<TextBox Classes="clearButton">Clear</TextBox>
				<TextBox PasswordChar="*" Classes="revealPasswordButton">Reveal Password</TextBox>
				<TextBox PasswordChar="*" Classes="revealPasswordButton" RevealPassword="True">Password Revealed</TextBox>
				<TextBox Watermark="Watermark"/>
				<TextBox Watermark="Floating Watermark" UseFloatingWatermark="True"/>
				<TextBox Watermark="Floating Watermark" UseFloatingWatermark="True">Content</TextBox>
			</StackPanel>
		</Border>
	</Design.PreviewWith>

	<MenuFlyout x:Key="DefaultTextBoxContextFlyout" Placement="Bottom">
		<MenuItem x:Name="TextBoxContextFlyoutCutItem"
				  Header="Cut"
				  Command="{Binding $parent[TextBox].Cut}"
				  IsEnabled="{Binding $parent[TextBox].CanCut}"
				  InputGesture="{x:Static TextBox.CutGesture}" />

		<MenuItem x:Name="TextBoxContextFlyoutCopyItem"
				  Header="Copy"
				  Command="{Binding $parent[TextBox].Copy}"
				  IsEnabled="{Binding $parent[TextBox].CanCopy}"
				  InputGesture="{x:Static TextBox.CopyGesture}"/>

		<MenuItem x:Name="TextBoxContextFlyoutPasteItem"
				  Header="Paste"
				  Command="{Binding $parent[TextBox].Paste}"
				  IsEnabled="{Binding $parent[TextBox].CanPaste}"
				  InputGesture="{x:Static TextBox.PasteGesture}"/>
	</MenuFlyout>

	<ContextMenu x:Key="DefaultTextBoxContextMenu" x:Name="TextBoxContextMenu">
		<MenuItem x:Name="TextBoxContextMenuCutItem"
				  Header="Cut"
				  Command="{Binding $parent[TextBox].Cut}"
				  IsEnabled="{Binding $parent[TextBox].CanCut}"
				  InputGesture="{x:Static TextBox.CutGesture}" />

		<MenuItem x:Name="TextBoxContextMenuCopyItem"
				  Header="Copy"
				  Command="{Binding $parent[TextBox].Copy}"
				  IsEnabled="{Binding $parent[TextBox].CanCopy}"
				  InputGesture="{x:Static TextBox.CopyGesture}"/>

		<MenuItem x:Name="TextBoxContextMenuPasteItem"
				  Header="Paste"
				  Command="{Binding $parent[TextBox].Paste}"
				  IsEnabled="{Binding $parent[TextBox].CanPaste}"
				  InputGesture="{x:Static TextBox.PasteGesture}"/>
	</ContextMenu>

	<ControlTheme x:Key="AntDesignTextBoxButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource TextBoxButtonBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxButtonBorderBrush}" />
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Width" Value="15" />
		<Setter Property="Height" Value="15" />
		<Setter Property="CornerRadius" Value="20"/>
		<Setter Property="Padding" Value="2" />
		<Setter Property="TextElement.Foreground" Value="{DynamicResource TextBoxButtonForeground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<ContentPresenter x:Name="{x:Static helpers:PARTNameHelper.PART_ContentPresenter}"
									  Background="{TemplateBinding Background}"
									  CornerRadius="{TemplateBinding CornerRadius}"
									  BorderBrush="{TemplateBinding BorderBrush}"
									  BorderThickness="{TemplateBinding BorderThickness}"
									  Content="{TemplateBinding Content}"
									  Padding="{TemplateBinding Padding}">
					</ContentPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style Selector="^:pointerover /template/ ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource TextBoxButtonPointerOverBackground}" />
		</Style>

		<Style Selector="^:pressed /template/ ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource TextBoxButtonPressedBackground}" />
		</Style>

		<Style Selector="^:disabled /template/ ContentPresenter">
			<Setter Property="Opacity" Value="0" />
		</Style>
	</ControlTheme>

	<ControlTheme x:Key="AntDesignTextBoxToggleButtonStyle" TargetType="ToggleButton">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Width" Value="18" />
		<Setter Property="Height" Value="18" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="TextElement.Foreground" Value="{DynamicResource TextBoxButtonForeground1}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<ContentPresenter x:Name="{x:Static helpers:PARTNameHelper.PART_ContentPresenter}"
									  Background="{TemplateBinding Background}"
									  Content="{TemplateBinding Content}"
									  Padding="{TemplateBinding Padding}">
					</ContentPresenter>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style Selector="^:pointerover /template/ ContentPresenter">
			<Setter Property="Foreground" Value="{DynamicResource TextBoxButtonPointerOverBackground}" />
		</Style>

		<Style Selector="^:pressed /template/ ContentPresenter">
			<Setter Property="Foreground" Value="{DynamicResource TextBoxButtonPressedBackground}" />
		</Style>

		<Style Selector="^:disabled /template/ ContentPresenter">
			<Setter Property="Opacity" Value="0" />
		</Style>

	</ControlTheme>

	<ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
		<Setter Property="FontSize" Value="{DynamicResource FontSize}" />
		<Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource TextBoxForeground}" />
		<Setter Property="CaretBrush" Value="{DynamicResource TextBoxCaretBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
		<Setter Property="SelectionBrush" Value="{DynamicResource TextBoxSelectionBackground}" />
		<Setter Property="SelectionForegroundBrush" Value="{DynamicResource TextBoxSelectionForeground}"/>
		<Setter Property="assists:TextBoxAssists.PointerOverBorderBrush" Value="{DynamicResource TextBoxPointerOverBorderBrush}"/>
		<Setter Property="assists:TextBoxAssists.FocusBorderBrush" Value="{DynamicResource TextBoxPointerFocusBorderBrush}"/>
		<Setter Property="assists:TextBoxAssists.FloatingForeground" Value="{DynamicResource TextBoxFloatingForeground}"/>
		<Setter Property="assists:TextBoxAssists.FloatingMargin" Value="{DynamicResource TextBoxFloatingMargin}"/>
		<Setter Property="assists:TextBoxAssists.RippleColor" Value="{DynamicResource RippleColor}"/>
		<Setter Property="assists:TextBoxAssists.RippleColorAlpha" Value="{DynamicResource RippleOpacity}"/>
		<Setter Property="BorderThickness" Value="{DynamicResource TextBoxBorderThickness}" />
		<Setter Property="CornerRadius" Value="{DynamicResource TextBoxCornerRadius}" />
		<Setter Property="Padding" Value="{DynamicResource TextBoxPadding}" />
		<Setter Property="MinWidth" Value="{DynamicResource TextBoxMinWidth}" />
		<Setter Property="MinHeight" Value="{DynamicResource TextBoxMinHeight}" />
		<Setter Property="ClipToBounds" Value="False" />
		<Setter Property="FocusAdorner" Value="{x:Null}" />
		<Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
		<Setter Property="ContextFlyout" Value="{StaticResource DefaultTextBoxContextFlyout}" />
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<ControlTemplate>
				<DataValidationErrors>
					<ripple:RippleEffectx x:Name="{x:Static helpers:PARTNameHelper.PART_BorderElement}"
										  Background="{TemplateBinding Background}"
										  BorderBrush="{TemplateBinding BorderBrush}"
										  BorderThickness="{TemplateBinding BorderThickness}"
										  CornerRadius="{TemplateBinding CornerRadius}"
										  RippleColor="{TemplateBinding assists:TextBoxAssists.RippleColor}"
										  RippleColorAlpha="{TemplateBinding assists:TextBoxAssists.RippleColorAlpha}"
										  MinWidth="{TemplateBinding MinWidth}"
										  MinHeight="{TemplateBinding MinHeight}">

						<Panel>
							<TextBlock x:Name="{x:Static helpers:PARTNameHelper.PART_FloatingWatermark}"
									   FontSize="{TemplateBinding FontSize}"
									   IsVisible="False"
									   Foreground="{TemplateBinding assists:TextBoxAssists.FloatingForeground}"
									   Text="{TemplateBinding Watermark}"
									   HorizontalAlignment="Left"
									   VerticalAlignment="Top"
									   RenderTransformOrigin="0,0"
									   RenderTransform="scale(0.75)">
								<TextBlock.Transitions>
									<Transitions>
										<ThicknessTransition Duration="0:0:0.25" Property="Margin" Easing="CubicEaseOut" />
										<TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.25" Easing="CubicEaseOut" />
									</Transitions>
								</TextBlock.Transitions>
							</TextBlock>

							<Grid ColumnDefinitions="Auto,*,Auto" >
								<ContentPresenter Grid.Column="0"
												  Grid.ColumnSpan="1"
												  Content="{TemplateBinding InnerLeftContent}"/>

								<Panel x:Name="{x:Static helpers:PARTNameHelper.PART_InnerDockPanel}"
									   Grid.Column="1"
									   Grid.ColumnSpan="1"
									   Cursor="IBeam"
									   Margin="{TemplateBinding Padding}">

									<ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
												  VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}"
												  IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
												  AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}">
										<Panel>
											<TextBlock x:Name="{x:Static helpers:PARTNameHelper.PART_Watermark}"
													   Opacity="0.5"
													   Text="{TemplateBinding Watermark}"
													   TextAlignment="{TemplateBinding TextAlignment}"
													   TextWrapping="{TemplateBinding TextWrapping}"
													   IsVisible="{TemplateBinding Text, Converter={x:Static StringConverters.IsNullOrEmpty}}"
													   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

											<TextPresenter x:Name="{x:Static helpers:PARTNameHelper.PART_TextPresenter}"
														   Text="{TemplateBinding Text, Mode=TwoWay}"
														   CaretIndex="{TemplateBinding CaretIndex}"
														   SelectionStart="{TemplateBinding SelectionStart}"
														   SelectionEnd="{TemplateBinding SelectionEnd}"
														   TextAlignment="{TemplateBinding TextAlignment}"
														   TextWrapping="{TemplateBinding TextWrapping}"
														   LineHeight="{TemplateBinding LineHeight}"
														   LetterSpacing="{TemplateBinding LetterSpacing}"
														   PasswordChar="{TemplateBinding PasswordChar}"
														   RevealPassword="{TemplateBinding RevealPassword}"
														   SelectionBrush="{TemplateBinding SelectionBrush}"
														   SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
														   CaretBrush="{TemplateBinding CaretBrush}"
														   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
										</Panel>
									</ScrollViewer>
								</Panel>

								<ContentPresenter Grid.Column="2"
												  Grid.ColumnSpan="1"
												  Content="{TemplateBinding InnerRightContent}"/>
							</Grid>
						</Panel>
					</ripple:RippleEffectx>
				</DataValidationErrors>
			</ControlTemplate>
		</Setter>

		<!-- Disabled State -->
		<Style Selector="^:disabled">
			<Setter Property="Foreground" Value="{DynamicResource DisableForeground}" />
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_BorderElement">
				<Setter Property="Background" Value="{DynamicResource DisableBackground}" />
				<Setter Property="BorderBrush" Value="{DynamicResource DisableBorderBrush}" />
			</Style>

			<Style Selector="^ /template/ TextBlock#PART_Watermark, ^ /template/ TextBlock#PART_FloatingWatermark">
				<Setter Property="Foreground" Value="{DynamicResource DisableForeground}" />
			</Style>
		</Style>

		<!-- PointerOver State-->
		<Style Selector="^:pointerover">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_BorderElement">
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:TextBoxAssists.PointerOverBorderBrush}"/>
			</Style>
		</Style>

		<!-- Focused State -->
		<Style Selector="^:focus">
			<Style Selector="^ /template/ ripple|RippleEffectx#PART_BorderElement">
				<Setter Property="BorderBrush" Value="{TemplateBinding assists:TextBoxAssists.FocusBorderBrush}"/>
				<Setter Property="IsRipple" Value="True"/>
			</Style>
		</Style>

		<!--Error State-->
		<Style Selector="^:error">
			<Setter Property="BorderBrush" Value="{DynamicResource ErrorBorderBrush}"/>
			<Setter Property="assists:TextBoxAssists.PointerOverBorderBrush" Value="{DynamicResource ErrorBorderBrush}" />
			<Setter Property="assists:TextBoxAssists.FocusBorderBrush" Value="{DynamicResource ErrorBorderBrush}" />
			<Setter Property="assists:TextBoxAssists.RippleColor"  Value="{DynamicResource ErrorColor}"/>
		</Style>

		<!--FloatingWatermark-->
		<Style Selector="^[UseFloatingWatermark=true]:not(:empty) /template/ TextBlock#PART_FloatingWatermark">
			<Setter Property="IsVisible" Value="True" />
			<Setter Property="Margin" Value="{TemplateBinding assists:TextBoxAssists.FloatingMargin}" />
			<Setter Property="RenderTransform" Value="scale(1)" />
		</Style>

		<!--class revealPasswordButton-->
		<Style Selector="^.revealPasswordButton[AcceptsReturn=False][IsReadOnly=False]:not(TextBox:empty)">
			<Setter Property="InnerRightContent">
				<Template>
					<Panel Margin="{DynamicResource TextBoxButtonIconMargin}">
						<Panel.Styles>
							<Style Selector="ToggleButton[IsChecked=True]">
								<Setter Property="(ToolTip.Tip)" Value="Hide Password" />
							</Style>
							<Style Selector="ToggleButton[IsChecked=False]">
								<Setter Property="(ToolTip.Tip)" Value="Show Password" />
							</Style>
						</Panel.Styles>
						<ToggleButton Theme="{StaticResource AntDesignTextBoxToggleButtonStyle}"
								      IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}"
								      ClipToBounds="True">
							<Panel>
								<PathIcon Data="{StaticResource PasswordBoxRevealButtonData}"
										  Height="8" Width="12"
										  IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<PathIcon Data="{StaticResource PasswordBoxHideButtonData}"
										  Height="12" Width="12"
										  IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>
					</Panel>

				</Template>
			</Setter>
		</Style>

		<!--class clearButton-->
		<Style Selector="^.clearButton[AcceptsReturn=False][IsReadOnly=False]:focus:not(TextBox:empty)">
			<Setter Property="InnerRightContent">
				<Template>
					<Button Theme="{StaticResource AntDesignTextBoxButtonStyle}"
							Command="{Binding $parent[TextBox].Clear}"
							Margin="{DynamicResource TextBoxButtonIconMargin}"
							ClipToBounds="False">
						<PathIcon Data="{StaticResource TextBoxClearButtonData}" 
								  Width="{DynamicResource TextBoxButtonIconWidth}"
								  Height="{DynamicResource TextBoxButtonIconHeight}"/>
					</Button>
				</Template>
			</Setter>
		</Style>
	</ControlTheme>

</ResourceDictionary>

<ResourceDictionary xmlns="https://github.com/avaloniaui"
				    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="using:Avalonia.Controls"
					xmlns:primitives="using:Avalonia.Controls.Primitives"
					x:CompileBindings="True">

	<ControlTheme x:Key="ColorViewPaletteListBoxTheme" TargetType="ListBox">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
		<Setter Property="Template">
			<ControlTemplate>
				<Border Name="border"
						ClipToBounds="{TemplateBinding ClipToBounds}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{TemplateBinding CornerRadius}">
					<ScrollViewer Name="PART_ScrollViewer"
								  HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
								  VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}"
								  IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
								  AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}">
						<ItemsPresenter Name="PART_ItemsPresenter"
										ItemsPanel="{TemplateBinding ItemsPanel}"
										Margin="{TemplateBinding Padding}"/>
					</ScrollViewer>
				</Border>
			</ControlTemplate>
		</Setter>
	</ControlTheme>

	<ControlTheme x:Key="ColorViewPaletteListBoxItemTheme" TargetType="ListBoxItem">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Template">
			<ControlTemplate TargetType="{x:Type ListBoxItem}">
				<Grid UseLayoutRounding="False">
					<ContentPresenter Name="PART_ContentPresenter"
									  Background="{TemplateBinding Background}"
									  BorderBrush="{TemplateBinding BorderBrush}"
									  BorderThickness="{TemplateBinding BorderThickness}"
									  CornerRadius="{TemplateBinding CornerRadius}"
									  ContentTemplate="{TemplateBinding ContentTemplate}"
									  Content="{TemplateBinding Content}"
									  Padding="{TemplateBinding Padding}"
									  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
					<Rectangle x:Name="BorderRectangle"
							   IsHitTestVisible="False"
							   StrokeThickness="3"
							   HorizontalAlignment="Stretch"
							   VerticalAlignment="Stretch" />
				</Grid>
			</ControlTemplate>
		</Setter>

		<Style Selector="^ /template/ Rectangle#BorderRectangle">
			<Setter Property="Stroke" Value="{DynamicResource SystemControlHighlightListAccentLowBrush}" />
			<Setter Property="Opacity" Value="0" />
		</Style>

		<Style Selector="^:pointerover /template/ Rectangle#BorderRectangle"
			   x:DataType="Color">
			<Setter Property="Stroke" Value="{Binding Converter={StaticResource ContrastBrushConverter}}" />
			<Setter Property="Opacity" Value="0.5" />
		</Style>

		<Style Selector="^:selected /template/ Rectangle#BorderRectangle"
			   x:DataType="Color">
			<!-- The below and above lines really should be:
             'Value="{Binding Converter={StaticResource ContrastBrushConverter}, ConverterParameter={DynamicResource TextControlForeground}}"'
           However, DynamicResource and Binding is not currently supported in Avalonia for converter parameters.
           This means certain colors with transparency less than 50% may have a selection border that is difficult
           to see over top of the default control/window background. Since palettes do not usually have transparency
           it is considered better to disable this functionality rather than work around it with a multi-value
           converter. This should be revisited if Avalonia supports the above code in the future. -->
			<Setter Property="Stroke" Value="{Binding Converter={StaticResource ContrastBrushConverter}}" />
			<Setter Property="Opacity" Value="1" />
		</Style>
	</ControlTheme>

	<!-- Based on the Fluent ToggleButton ControlTheme -->
	<ControlTheme x:Key="ColorViewColorModelRadioButtonTheme" TargetType="RadioButton">
		<Setter Property="Background" Value="{DynamicResource ToggleButtonBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForeground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrush}" />
		<Setter Property="BorderThickness" Value="{DynamicResource ToggleButtonBorderThemeThickness}" />
		<Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
		<Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="FontWeight" Value="Normal" />
		<Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<ControlTemplate>
				<ContentPresenter x:Name="PART_ContentPresenter"
								  Background="{TemplateBinding Background}"
								  BorderBrush="{TemplateBinding BorderBrush}"
								  BorderThickness="{TemplateBinding BorderThickness}"
								  CornerRadius="{TemplateBinding CornerRadius}"
								  Content="{TemplateBinding Content}"
								  ContentTemplate="{TemplateBinding ContentTemplate}"
								  Padding="{TemplateBinding Padding}"
								  RecognizesAccessKey="True"
								  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</ControlTemplate>
		</Setter>

		<Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundPointerOver}" />
			<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushPointerOver}" />
			<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundPointerOver}" />
		</Style>

		<Style Selector="^:pressed /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundPressed}" />
			<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushPressed}" />
			<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundPressed}" />
		</Style>

		<Style Selector="^:checked">
			<Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundChecked}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushChecked}" />
				<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundChecked}" />
			</Style>

			<Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundCheckedPointerOver}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushCheckedPointerOver}" />
				<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundCheckedPointerOver}" />
			</Style>

			<Style Selector="^:pressed /template/ ContentPresenter#PART_ContentPresenter">
				<Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundCheckedPressed}" />
				<Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrushCheckedPressed}" />
				<Setter Property="Foreground" Value="{DynamicResource ToggleButtonForegroundCheckedPressed}" />
			</Style>
		</Style>
	</ControlTheme>

	<!-- Based on the Fluent TabItem ControlTheme -->
	<ControlTheme x:Key="ColorViewTabItemTheme" TargetType="TabItem">
		<Setter Property="FontSize" Value="{DynamicResource TabItemHeaderFontSize}" />
		<Setter Property="FontWeight" Value="{DynamicResource TabItemHeaderThemeFontWeight}" />
		<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundUnselected}" />
		<Setter Property="Foreground" Value="{DynamicResource TabItemHeaderForegroundUnselected}" />
		<Setter Property="Padding" Value="6,0,6,0" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="MinHeight" Value="{DynamicResource ColorViewTabStripHeight}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<ControlTemplate>
				<Border Name="PART_LayoutRoot"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{TemplateBinding CornerRadius}"
						Padding="{TemplateBinding Padding}">
					<Panel>
						<ContentPresenter Name="PART_ContentPresenter"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  Content="{TemplateBinding Header}"
										  ContentTemplate="{TemplateBinding HeaderTemplate}"
										  FontFamily="{TemplateBinding FontFamily}"
										  FontSize="{TemplateBinding FontSize}"
										  FontWeight="{TemplateBinding FontWeight}" />
						<Border Name="PART_SelectedPipe"
								Height="{DynamicResource TabItemPipeThickness}"
								Margin="0,0,0,2"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								Background="{DynamicResource TabItemHeaderSelectedPipeFill}"
								CornerRadius="{DynamicResource ControlCornerRadius}"
								IsVisible="False"/>
					</Panel>
				</Border>
			</ControlTemplate>
		</Setter>

		<Style Selector="^:selected">
			<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundSelected}" />
			<Setter Property="Foreground" Value="{DynamicResource TabItemHeaderForegroundSelected}" />
		</Style>
		<Style Selector="^:selected /template/ Border#PART_SelectedPipe">
			<Setter Property="IsVisible" Value="True" />
		</Style>

		<Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
			<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundUnselectedPointerOver}" />
			<Setter Property="TextElement.Foreground" Value="{DynamicResource TabItemHeaderForegroundUnselectedPointerOver}" />
		</Style>

		<Style Selector="^:selected:pointerover /template/ Border#PART_LayoutRoot">
			<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundSelectedPointerOver}" />
			<Setter Property="TextElement.Foreground" Value="{DynamicResource TabItemHeaderForegroundSelectedPointerOver}" />
		</Style>

		<Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
			<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundUnselectedPressed}" />
			<Setter Property="TextElement.Foreground" Value="{DynamicResource TabItemHeaderForegroundUnselectedPressed}" />
		</Style>

		<Style Selector="^:selected:pressed /template/ Border#PART_LayoutRoot">
			<Setter Property="Background" Value="{DynamicResource TabItemHeaderBackgroundSelectedPressed}" />
			<Setter Property="TextElement.Foreground" Value="{DynamicResource TabItemHeaderForegroundSelectedPressed}" />
		</Style>
	</ControlTheme>

</ResourceDictionary>
